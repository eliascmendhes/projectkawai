---
interface Music {
  title: string;
  artist: string;
  file: string;
  cover: string;
}
---

<!-- Player Minimizado -->
<div id="minimizedPlayer" class="fixed bottom-4 right-4 hidden">
  <button class="minimized-button" id="expandButton">
    <div class="playing-indicator"></div>
  </button>
</div>

<!-- Player Principal -->
<div id="mainPlayer" class="fixed bottom-4 right-4 w-[calc(100%-2rem)] sm:w-[300px] winamp-player">
  <div class="winamp-header">
    <div class="winamp-title">
      <span class="winamp-logo">WINAMP</span>
      <span class="winamp-version">[2.91]</span>
    </div>
    <div class="winamp-controls">
      <button class="winamp-button minimize" id="minimizeButton">_</button>
      <button class="winamp-button maximize">□</button>
      <button class="winamp-button close" id="closeButton">×</button>
    </div>
  </div>

  <div class="winamp-main">
    <div class="winamp-info">
      <div class="winamp-display">
        <div class="song-info">
          <marquee scrollamount="2" id="musicTitle">Nome da Música</marquee>
          <small id="musicArtist">Artista</small>
        </div>
        <div class="time-display">00:00</div>
      </div>

      <div class="winamp-visualizer">
        <div class="visualizer-bar" style="height: 15px"></div>
        <div class="visualizer-bar" style="height: 8px"></div>
        <div class="visualizer-bar" style="height: 20px"></div>
        <div class="visualizer-bar" style="height: 12px"></div>
        <div class="visualizer-bar" style="height: 18px"></div>
      </div>
    </div>

    <div class="winamp-controls-main">
      <div class="winamp-progress">
        <div class="progress-bar" id="progressBar"></div>
      </div>

      <div class="playback-controls">
        <button class="control-button prev">⏮</button>
        <button class="control-button play" id="playButton">▶</button>
        <button class="control-button stop">⏹</button>
        <button class="control-button next" id="nextButton">⏭</button>
      </div>
    </div>
  </div>
</div>

<style>
  .winamp-player {
    background: #282828;
    border: 2px solid #535353;
    border-radius: 2px;
    font-family: 'Tahoma', sans-serif;
    z-index: 30;
  }

  .winamp-header {
    background: linear-gradient(90deg, #1A1A1A, #333);
    padding: 3px 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .winamp-title {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .winamp-logo {
    color: #20B2A0;
    font-size: 0.75rem;
    font-weight: bold;
  }

  .winamp-version {
    color: #666;
    font-size: 0.65rem;
  }

  .winamp-main {
    padding: 8px;
    background: #282828;
  }

  .winamp-info {
    background: #000;
    padding: 4px;
    margin-bottom: 8px;
  }

  .winamp-display {
    background: #000;
    color: #00FF00;
    font-family: 'LCD', monospace;
    padding: 4px;
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
  }

  .song-info {
    flex: 1;
    overflow: hidden;
  }

  .winamp-visualizer {
    display: flex;
    gap: 2px;
    padding: 4px;
    justify-content: center;
    align-items: flex-end;
    height: 25px;
    background: #000;
    margin-top: 4px;
  }

  .visualizer-bar {
    width: 3px;
    background: linear-gradient(to top, #00FF00, #008000);
    transition: height 0.1s ease;
  }

  .winamp-progress {
    background: #000;
    height: 10px;
    margin-bottom: 8px;
    border: 1px solid #444;
  }

  .progress-bar {
    height: 100%;
    background: #20B2AA;
    width: 0%;
  }

  .playback-controls {
    display: flex;
    justify-content: center;
    gap: 4px;
  }

  .control-button {
    background: #282828;
    border: 1px solid #535353;
    color: #20B2AA;
    padding: 4px 8px;
    font-size: 0.75rem;
  }

  .control-button:hover {
    background: #333;
  }

  .control-button:active {
    background: #1A1A1A;
    transform: translateY(1px);
  }

  @media (max-width: 768px) {
    .winamp-player {
      padding: 4px;
    }

    .control-button {
      padding: 4px 6px;
    }
  }

  /* Animação para o visualizador */
  @keyframes visualize {
    0% { height: 5px; }
    50% { height: 20px; }
    100% { height: 5px; }
  }

  .visualizer-bar {
    animation: visualize 0.5s infinite;
    animation-delay: calc(var(--bar-index) * 0.1s);
  }

  @media (max-width: 640px) {
    .winamp-player {
      width: 250px;
      right: 50%;
      transform: translateX(50%);
      font-size: 0.9rem;
    }

    .winamp-main {
      padding: 4px;
    }

    .winamp-display {
      font-size: 0.7rem;
    }

    .control-button {
      padding: 3px 6px;
      font-size: 0.7rem;
    }

    .winamp-progress {
      height: 8px;
      margin-bottom: 6px;
    }

    .playback-controls {
      gap: 2px;
    }

    .winamp-visualizer {
      height: 20px;
    }

    .visualizer-bar {
      width: 2px;
    }

    .winamp-logo {
      font-size: 0.7rem;
    }

    .winamp-version {
      font-size: 0.6rem;
    }
  }

  /* Ajuste específico para telas muito pequenas */
  @media (max-width: 360px) {
    .winamp-player {
      width: 220px;
    }
  }

  /* Estilos do Player Minimizado */
  .minimized-button {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #282828;
    border: 2px solid #535353;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .minimized-button:hover {
    transform: scale(1.1);
  }

  .playing-indicator {
    width: 12px;
    height: 12px;
    background: #20B2AA;
    border-radius: 50%;
    position: absolute;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    animation: musicPlayerPulse 2s infinite;
    margin: 0 !important;
    padding: 0 !important;
  }

  @keyframes musicPlayerPulse {
    0% {
      opacity: 0.5;
      transform: translate(-50%, -50%) scale(0.8) !important;
    }
    50% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1) !important;
    }
    100% {
      opacity: 0.5;
      transform: translate(-50%, -50%) scale(0.8) !important;
    }
  }

  /* Estado Oculto */
  .hidden {
    display: none;
  }
</style>

<script>
  class MusicPlayerState {
    private static instance: MusicPlayerState;
    private audio: HTMLAudioElement;

    private constructor() {
      this.audio = new Audio();
      this.audio.volume = 0.5; // Volume padrão

      // Recuperar estado anterior
      const savedTime = localStorage.getItem('musicTime');
      const savedIndex = localStorage.getItem('currentSongIndex');
      const savedVolume = localStorage.getItem('volume');

      if (savedTime) this.audio.currentTime = parseFloat(savedTime);
      if (savedVolume) this.audio.volume = parseFloat(savedVolume);

      // Salvar estado periodicamente
      setInterval(() => this.saveState(), 1000);
    }

    private saveState() {
      localStorage.setItem('musicTime', this.audio.currentTime.toString());
      localStorage.setItem('isPlaying', (!this.audio.paused).toString());
      localStorage.setItem('volume', this.audio.volume.toString());
    }

    static getInstance(): MusicPlayerState {
      if (!MusicPlayerState.instance) {
        MusicPlayerState.instance = new MusicPlayerState();
      }
      return MusicPlayerState.instance;
    }

    getAudio(): HTMLAudioElement {
      return this.audio;
    }
  }

  // Player setup
  const playerState = MusicPlayerState.getInstance();
  const audio = playerState.getAudio();
  let currentSongIndex = parseInt(localStorage.getItem('currentSongIndex') || '0');
  let isPlaying = false;

  // Elementos do DOM
  const playButton = document.getElementById('playButton') as HTMLButtonElement;
  const nextButton = document.getElementById('nextButton') as HTMLButtonElement;
  const prevButton = document.querySelector('.prev') as HTMLButtonElement;
  const stopButton = document.querySelector('.stop') as HTMLButtonElement;
  const progressBar = document.getElementById('progressBar') as HTMLDivElement;
  const musicTitle = document.getElementById('musicTitle') as HTMLElement;
  const musicArtist = document.getElementById('musicArtist') as HTMLElement;

  // Elementos do DOM para controle de visualização
  const mainPlayer = document.getElementById('mainPlayer');
  const minimizedPlayer = document.getElementById('minimizedPlayer');
  const minimizeButton = document.getElementById('minimizeButton');
  const expandButton = document.getElementById('expandButton');
  const closeButton = document.getElementById('closeButton');

  // Estado do player
  let isMinimized = localStorage.getItem('playerMinimized') === 'true';
  let isClosed = localStorage.getItem('playerClosed') === 'true';

  // Playlist
  const playlist = [
    { file: "/music/key.mp3", artist: "C418" },
    { file: "/music/cat.mp3", artist: "C418" },
    { file: "/music/dry_hands.mp3", artist: "C418" },
    { file: "/music/minecraft.mp3", artist: "C418" },
    { file: "/music/sweden.mp3", artist: "C418" },
    { file: "/music/laintheme.mp3", artist: "Cyberia Mix" },
    { file: "/music/familyportrait.mp3", artist: "Serial Experiments" },
  ].map(song => ({
    ...song,
    title: getNameFromFile(song.file)
  }));

  // Funções auxiliares
  function getNameFromFile(file: string): string {
    return file.split('/').pop()?.split('.')[0]
      .replace(/-/g, ' ')
      .replace(/_/g, ' ')
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ') || '';
  }

  function updatePlayerUI() {
    const song = playlist[currentSongIndex];
    musicTitle.textContent = song.title;
    musicArtist.textContent = song.artist;
    playButton.textContent = isPlaying ? '⏸' : '▶';
    updatePlayingIndicator();
  }

  // Funções de controle
  function loadAndPlaySong(index: number) {
    currentSongIndex = index;
    const song = playlist[index];

    audio.src = song.file;
    audio.load();

    if (isPlaying) {
      audio.play().catch(console.error);
    }

    localStorage.setItem('currentSongIndex', index.toString());
    updatePlayerUI();
  }

  function togglePlay() {
    if (!audio.src) {
      loadAndPlaySong(currentSongIndex);
    }

    if (isPlaying) {
      audio.pause();
    } else {
      audio.play().catch(console.error);
    }

    isPlaying = !isPlaying;
    updatePlayerUI();
  }

  function prevSong() {
    currentSongIndex = (currentSongIndex - 1 + playlist.length) % playlist.length;
    loadAndPlaySong(currentSongIndex);
  }

  function nextSong() {
    currentSongIndex = (currentSongIndex + 1) % playlist.length;
    loadAndPlaySong(currentSongIndex);
  }

  function stopSong() {
    audio.pause();
    audio.currentTime = 0;
    isPlaying = false;
    updatePlayerUI();
  }

  // Event Listeners
  playButton?.addEventListener('click', togglePlay);
  nextButton?.addEventListener('click', nextSong);
  prevButton?.addEventListener('click', prevSong);
  stopButton?.addEventListener('click', stopSong);

  // Atualizar barra de progresso
  audio.addEventListener('timeupdate', () => {
    const progress = (audio.currentTime / audio.duration) * 100;
    if (progressBar) progressBar.style.width = `${progress}%`;
  });

  // Próxima música quando acabar
  audio.addEventListener('ended', nextSong);

  // Funções de controle de visualização
  function minimizePlayer() {
    mainPlayer?.classList.add('hidden');
    minimizedPlayer?.classList.remove('hidden');
    localStorage.setItem('playerMinimized', 'true');
    isMinimized = true;
  }

  function expandPlayer() {
    mainPlayer?.classList.remove('hidden');
    minimizedPlayer?.classList.add('hidden');
    localStorage.setItem('playerMinimized', 'false');
    isMinimized = false;
  }

  function closePlayer() {
    // Para a música
    audio.pause();
    audio.currentTime = 0;
    isPlaying = false;

    // Atualiza UI e estado
    updatePlayerUI();
    mainPlayer?.classList.add('hidden');
    minimizedPlayer?.classList.add('hidden');
    localStorage.setItem('playerClosed', 'true');
    isClosed = true;
  }

  // Event Listeners
  minimizeButton?.addEventListener('click', minimizePlayer);
  expandButton?.addEventListener('click', expandPlayer);
  closeButton?.addEventListener('click', closePlayer);

  // Inicialização do estado visual
  document.addEventListener('DOMContentLoaded', () => {
    if (isClosed) {
      mainPlayer?.classList.add('hidden');
      minimizedPlayer?.classList.add('hidden');
    } else if (isMinimized) {
      minimizePlayer();
    }
  });

  // Atualizar indicador de reprodução
  function updatePlayingIndicator() {
    const indicator = document.querySelector('.playing-indicator') as HTMLElement;
    if (indicator) {
      indicator.style.backgroundColor = isPlaying ? '#20B2AA' : '#666';
    }
  }

  // Restaurar player ao navegar para nova página
  window.addEventListener('pageshow', () => {
    if (isClosed) {
      mainPlayer?.classList.add('hidden');
      minimizedPlayer?.classList.remove('hidden');
      localStorage.setItem('playerClosed', 'false');
      localStorage.setItem('playerMinimized', 'true');
      isClosed = false;
      isMinimized = true;
    }
  });
</script>
