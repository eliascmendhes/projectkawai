---
interface Music {
  title: string;
  artist: string;
  file: string;
  cover: string;
}
---

<div class="fixed bottom-4 right-4 w-[calc(100%-2rem)] md:w-64 bg-white/95 backdrop-blur-sm rounded-xl shadow-md border border-pink-200 p-2 z-30 nostalgic-player">
  <div class="flex items-center gap-2">
    <div class="w-12 h-12 rounded-lg overflow-hidden border border-pink-100 nostalgic-cover">
      <img src="/covers/minecraft_music.jpeg" alt="Album cover" class="w-full h-full object-cover" id="musicCover">
    </div>

    <div class="flex-1">
      <div class="text-xs">
        <h3 class="font-[Mochiy+Pop+One] text-pink-600 truncate nostalgic-title" id="musicTitle">Nome da Música</h3>
        <p class="text-purple-500 text-xs truncate nostalgic-artist" id="musicArtist">Artista</p>
      </div>

      <div class="w-full bg-pink-100 rounded-full h-1.5 mt-1.5 nostalgic-progress-container">
        <div class="bg-gradient-to-r from-pink-400 to-purple-400 h-1.5 rounded-full w-0 nostalgic-progress" id="progressBar"></div>
      </div>
    </div>

    <div class="flex items-center gap-1">
      <button class="hover:scale-110 transition-transform p-1.5 nostalgic-button" id="playButton">
        <span class="kawaii-content">▶️</span>
        <span class="retro-content">►</span>
      </button>
      <button class="hover:scale-110 transition-transform p-1.5 nostalgic-button" id="nextButton">
        <span class="kawaii-content">⏭️</span>
        <span class="retro-content">»</span>
      </button>
    </div>
  </div>
</div>

<style>
  /* Estilos Kawaii */
  .kawaii-content {
    display: block;
  }

  .retro-content {
    display: none;
  }

  .nostalgic-player {
    transition: all 0.3s ease;
  }

  .nostalgic-cover {
    transition: transform 0.3s ease;
  }

  .nostalgic-cover:hover {
    transform: scale(1.05);
  }

  .nostalgic-button {
    background: transparent;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .nostalgic-button:hover {
    transform: scale(1.1);
    opacity: 0.8;
  }

  .nostalgic-progress {
    transition: width 0.1s linear;
  }

  /* Estilos para o modo retrô */
  :global(.nostalgic-mode) .nostalgic-player {
    background: #c0c0c0;
    border: 2px solid;
    border-color: #ffffff #404040 #404040 #ffffff;
    box-shadow: inset -1px -1px #808080, inset 1px 1px #dfdfdf;
    border-radius: 0;
    padding: 8px;
  }

  :global(.nostalgic-mode) .nostalgic-cover {
    border: 2px solid;
    border-color: #404040 #ffffff #ffffff #404040;
    box-shadow: inset 1px 1px #808080;
    border-radius: 0;
  }

  :global(.nostalgic-mode) .nostalgic-title {
    font-family: 'MS Gothic', monospace;
    color: #000080;
    font-weight: bold;
    font-size: 0.75rem;
  }

  :global(.nostalgic-mode) .nostalgic-artist {
    font-family: 'MS Gothic', monospace;
    color: #000000;
    font-size: 0.7rem;
  }

  :global(.nostalgic-mode) .nostalgic-progress-container {
    background: #ffffff;
    border: 2px solid;
    border-color: #404040 #ffffff #ffffff #404040;
    box-shadow: inset 1px 1px #808080;
    border-radius: 0;
    height: 10px;
  }

  :global(.nostalgic-mode) .nostalgic-progress {
    background: #000080;
    border-radius: 0;
    height: 6px;
    margin: 1px;
  }

  :global(.nostalgic-mode) .nostalgic-button {
    background: #c0c0c0;
    border: 2px solid;
    border-color: #ffffff #404040 #404040 #ffffff;
    box-shadow: inset -1px -1px #808080, inset 1px 1px #dfdfdf;
    color: #000000;
    font-family: 'MS Gothic', monospace;
    padding: 2px 6px;
    font-size: 0.875rem;
    min-width: 24px;
    text-align: center;
  }

  :global(.nostalgic-mode) .nostalgic-button:hover {
    background: #d4d0c8;
  }

  :global(.nostalgic-mode) .nostalgic-button:active {
    border-color: #404040 #ffffff #ffffff #404040;
    box-shadow: inset 1px 1px #808080, inset -1px -1px #dfdfdf;
    padding-top: 3px;
    padding-left: 7px;
  }

  /* Controle de visibilidade */
  :global(.nostalgic-mode) .kawaii-content {
    display: none !important;
  }

  :global(.nostalgic-mode) .retro-content {
    display: block !important;
  }

  /* Remove animações no modo retrô */
  :global(.nostalgic-mode) * {
    transition: none !important;
    transform: none !important;
  }
</style>

<script>
  class MusicPlayerState {
    private static instance: MusicPlayerState;
    private audio: HTMLAudioElement;

    private constructor() {
      this.audio = new Audio();
      // Recuperar estado anterior se existir
      const savedTime = localStorage.getItem('musicTime');
      const savedIndex = localStorage.getItem('currentSongIndex');
      const savedIsPlaying = localStorage.getItem('isPlaying');

      if (savedTime) this.audio.currentTime = parseFloat(savedTime);
      if (savedIsPlaying === 'true') this.audio.play();

      // Salvar estado periodicamente
      setInterval(() => {
        localStorage.setItem('musicTime', this.audio.currentTime.toString());
        localStorage.setItem('isPlaying', (!this.audio.paused).toString());
      }, 1000);
    }

    static getInstance(): MusicPlayerState {
      if (!MusicPlayerState.instance) {
        MusicPlayerState.instance = new MusicPlayerState();
      }
      return MusicPlayerState.instance;
    }

    getAudio(): HTMLAudioElement {
      return this.audio;
    }
  }

  // Usar uma única instância do audio
  const playerState = MusicPlayerState.getInstance();
  const audio = playerState.getAudio();

  // Função para obter nome da música do arquivo
  function getNameFromFile(file: string): string {
    const fileName = file.split('/').pop()?.split('.')[0] || '';
    return fileName
      .replace(/-/g, ' ')
      .replace(/_/g, ' ')
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  const playlist = [
    {
      file: "/music/key.mp3",
      cover: "/covers/minecraft_music.jpeg"
    },
    {
      file: "/music/cat.mp3",
      cover: "/covers/minecraft_music.jpeg"
    },
     {
      file: "/music/dry_hands.mp3",
      cover: "/covers/minecraft_music.jpeg"
    },
    {
      file: "/music/minecraft.mp3",
      cover: "/covers/minecraft_music.jpeg"
    },
    {
      file: "/music/sweden.mp3",
      cover: "/covers/minecraft_music.jpeg"
    },
    {
      file: "/music/laintheme.mp3",
      cover: "/covers/laintheme.png"
    },
    {
      file: "/music/familyportrait.mp3",
      cover: "/covers/laintheme.png"
    },
    {
      file: "/music/creditsound.mp3",
      cover: "",
    },
    {
      file: "/music/introduction.mp3",
      cover: "",
    },
    {
      file: "/music/RdyS.mp3",
      cover: "",
    },
    {
      file: "/music/lainmaintheme.mp3",
      cover: "",
    },
    {
      file: "/music/kids.mp3",
      cover: "",
    },
    {
      file: "/music/KirbysDreamCourse.mp3",
      cover: "",
    }

  ].map(song => ({
    ...song,
    title: getNameFromFile(song.file),
    artist: "Unknown Artist"
  }));

  let currentSongIndex = parseInt(localStorage.getItem('currentSongIndex') || '0');
  let isPlaying = !audio.paused;

  const playButton = document.getElementById('playButton');
  const nextButton = document.getElementById('nextButton');
  const progressBar = document.getElementById('progressBar');
  const musicTitle = document.getElementById('musicTitle');
  const musicArtist = document.getElementById('musicArtist');
  const musicCover = document.getElementById('musicCover');

  // Função para carregar música
  function loadSong(index: number) {
    const song = playlist[index];
    if (audio.src !== new URL(song.file, window.location.href).href) {
      audio.src = song.file;
      musicTitle!.textContent = song.title;
      musicArtist!.textContent = song.artist;
      musicCover!.setAttribute('src', song.cover);
    }
    localStorage.setItem('currentSongIndex', index.toString());
  }

  // Função para próxima música
  function nextSong() {
    currentSongIndex = (currentSongIndex + 1) % playlist.length;
    loadSong(currentSongIndex);
    if (isPlaying) {
      audio.play();
    }
  }

  // Funções de controle
  function togglePlay() {
    if (isPlaying) {
      audio.pause();
      playButton!.innerHTML = '<span class="text-xl">▶️</span>';
    } else {
      audio.play();
      playButton!.innerHTML = '<span class="text-xl">⏸️</span>';
    }
    isPlaying = !isPlaying;
  }

  // Event listeners
  playButton?.addEventListener('click', togglePlay);
  nextButton?.addEventListener('click', nextSong);

  // Atualizar barra de progresso
  audio.addEventListener('timeupdate', () => {
    const progress = (audio.currentTime / audio.duration) * 100;
    if (progressBar) progressBar.style.width = `${progress}%`;
  });

  // Próxima música quando acabar
  audio.addEventListener('ended', nextSong);

  // Atualizar botão play/pause quando o estado mudar
  audio.addEventListener('play', () => {
    isPlaying = true;
    playButton!.innerHTML = '<span class="text-xl">⏸️</span>';
  });

  audio.addEventListener('pause', () => {
    isPlaying = false;
    playButton!.innerHTML = '<span class="text-xl">▶️</span>';
  });

  // Carregar música atual
  loadSong(currentSongIndex);

  // Atualizar UI com estado atual
  if (isPlaying) {
    playButton!.innerHTML = '<span class="text-xl">⏸️</span>';
  }
</script>
