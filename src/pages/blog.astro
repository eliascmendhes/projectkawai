---
import Layout from '../layouts/Layout.astro';
import PageTitle from '../components/PageTitle.astro';
import BlogCard from '../components/BlogCard.astro';

const allPosts = await Astro.glob('../posts/*.md');
const posts = allPosts
  .map(post => ({
    title: post.frontmatter.title,
    date: post.frontmatter.date,
    preview: post.frontmatter.preview,
    image: post.frontmatter.image,
    slug: post.frontmatter.slug,
    tags: post.frontmatter.tags || [],
    content: post.compiledContent()
  }))
  .sort((a, b) => {
    // Trabalho nas datas dos posts.
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    // Ordena do mais recente para o mais antigo
    return dateB.getTime() - dateA.getTime();
  });

// Obter todas as tags únicas
const allTags = [...new Set(posts.flatMap(post => post.tags))];
---

<Layout title="Blog">
  <div class="max-w-4xl mx-auto">
    <PageTitle title="Minhas postagens ♡" />

    <!-- Filtro de Tags -->
    <div class="mb-6">
      <div class="relative" id="tag-filters">
        <button
          class="px-4 py-2 rounded-full font-[Mochiy+Pop+One] text-sm
          bg-white/90 text-[#FF1493] border-2 border-[#FFD1DC]
          hover:bg-[#FFD1DC] hover:border-[#FF69B4] transition-all
          filter-all active w-full md:w-auto nostalgic-button"
          id="dropdown-button"
        >
          ✧ Filtrar por tag ✧
        </button>

        <div class="hidden absolute z-10 mt-2 w-full md:w-64 bg-white/95 backdrop-blur-sm
          rounded-xl border-2 border-[#FFD1DC] shadow-lg p-2 nostalgic-dropdown" id="dropdown-menu">
          <input
            type="text"
            placeholder="Buscar tag..."
            class="w-full px-3 py-2 mb-2 rounded-lg border border-[#FFD1DC]
            font-[Mochiy+Pop+One] text-sm focus:outline-none focus:border-[#FF69B4] nostalgic-input"
            id="tag-search"
          >
          <div class="max-h-48 overflow-y-auto" id="tag-list">
            <button
              class="w-full text-left px-3 py-2 rounded-lg font-[Mochiy+Pop+One] text-sm
              text-[#FF1493] hover:bg-[#FFD1DC] transition-all filter-all active nostalgic-tag-button"
            >
              ✧ Todas as tags ✧
            </button>
            {allTags.map(tag => (
              <button
                class="w-full text-left px-3 py-2 rounded-lg font-[Mochiy+Pop+One] text-sm
                text-[#FF1493] hover:bg-[#FFD1DC] transition-all tag-filter nostalgic-tag-button"
                data-tag={tag}
              >
                ✧ {tag}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>

    <div class="space-y-6">
      {posts.map(post => (
        <div class="post-card" data-tags={post.tags.join(',')}>
          <BlogCard {...post} />
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  /* Estilos para o modo retrô */
  :global(.nostalgic-mode) .nostalgic-button {
    background: #f5f5f5;
    border: 1px solid #999;
    border-radius: 0;
    box-shadow: 2px 2px 0 #666;
    transition: none;
    font-family: 'MS Gothic', monospace;
    color: #333;
  }

  :global(.nostalgic-mode) .nostalgic-button:hover {
    background: #e5e5e5;
    transform: none;
  }

  :global(.nostalgic-mode) .nostalgic-dropdown {
    background: #f5f5f5;
    border: 1px solid #999;
    border-radius: 0;
    box-shadow: 2px 2px 0 #666;
  }

  :global(.nostalgic-mode) .nostalgic-input {
    background: #fff;
    border: 1px solid #999;
    border-radius: 0;
    font-family: 'MS Gothic', monospace;
  }

  :global(.nostalgic-mode) .nostalgic-input:focus {
    outline: 1px solid #666;
    box-shadow: 1px 1px 0 #999;
  }

  :global(.nostalgic-mode) .nostalgic-tag-button {
    background: #f5f5f5;
    border: none;
    border-radius: 0;
    font-family: 'MS Gothic', monospace;
    color: #333;
  }

  :global(.nostalgic-mode) .nostalgic-tag-button:hover {
    background: #e5e5e5;
  }

  :global(.nostalgic-mode) .nostalgic-tag-button.active {
    background: #e5e5e5;
    border: 1px solid #999;
  }

  :global(.nostalgic-mode) #tag-list {
    scrollbar-width: thin;
    scrollbar-color: #999 #f5f5f5;
  }

  :global(.nostalgic-mode) #tag-list::-webkit-scrollbar {
    width: 8px;
  }

  :global(.nostalgic-mode) #tag-list::-webkit-scrollbar-track {
    background: #f5f5f5;
  }

  :global(.nostalgic-mode) #tag-list::-webkit-scrollbar-thumb {
    background-color: #999;
    border: 1px solid #f5f5f5;
  }

  /* Ajustes para os posts */
  :global(.nostalgic-mode) .post-card {
    margin-bottom: 1rem;
  }

  /* Animações removidas no modo retrô */
  :global(.nostalgic-mode) .transition-all {
    transition: none;
  }

  :global(.nostalgic-mode) .hover\:scale-105:hover {
    transform: none;
  }
</style>

<script>
  let activeTag: string | null = null;

  function updateFilterButtons() {
    document.querySelectorAll('.tag-filter, .filter-all').forEach((button) => {
      const buttonElement = button as HTMLButtonElement;
      buttonElement.classList.remove('active', 'bg-[#FFD1DC]');

      if (
        (buttonElement.classList.contains('filter-all') && !activeTag) ||
        (buttonElement.getAttribute('data-tag') === activeTag)
      ) {
        buttonElement.classList.add('active', 'bg-[#FFD1DC]');
      }
    });
    updateDropdownButton();
  }

  function filterPosts(tag: string | null) {
    const posts = document.querySelectorAll('.post-card');

    posts.forEach((post) => {
      const postElement = post as HTMLElement;
      const postTags = postElement.getAttribute('data-tags')?.split(',') || [];

      if (!tag || postTags.includes(tag)) {
        postElement.style.display = 'block';
      } else {
        postElement.style.display = 'none';
      }
    });
  }

  // Event listeners
  const allFilterButton = document.querySelector('.filter-all');
  if (allFilterButton) {
    allFilterButton.addEventListener('click', () => {
      activeTag = null;
      updateFilterButtons();
      filterPosts(null);
    });
  }

  document.querySelectorAll('.tag-filter').forEach((button) => {
    const buttonElement = button as HTMLButtonElement;
    buttonElement.addEventListener('click', () => {
      const tag = buttonElement.getAttribute('data-tag');
      if (tag) {
        activeTag = activeTag === tag ? null : tag;
        updateFilterButtons();
        filterPosts(activeTag);
      }
    });
  });

  // Dropdown functionality
  const dropdownButton = document.getElementById('dropdown-button') as HTMLButtonElement;
  const dropdownMenu = document.getElementById('dropdown-menu') as HTMLDivElement;
  const tagSearch = document.getElementById('tag-search') as HTMLInputElement;

  dropdownButton?.addEventListener('click', () => {
    dropdownMenu?.classList.toggle('hidden');
  });

  // Fechar dropdown quando clicar fora
  document.addEventListener('click', (e) => {
    const target = e.target as Node;
    if (!dropdownButton?.contains(target) && !dropdownMenu?.contains(target)) {
      dropdownMenu?.classList.add('hidden');
    }
  });

  // Funcionalidade de busca
  tagSearch?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    const searchTerm = target.value.toLowerCase();
    const tagButtons = document.querySelectorAll('#tag-list .tag-filter');

    tagButtons.forEach(button => {
      const buttonElement = button as HTMLElement;
      const tag = buttonElement.textContent?.toLowerCase() || '';
      if (tag.includes(searchTerm)) {
        buttonElement.style.display = 'block';
      } else {
        buttonElement.style.display = 'none';
      }
    });
  });

  // Atualizar texto do botão quando uma tag for selecionada
  function updateDropdownButton() {
    const button = document.getElementById('dropdown-button');
    if (activeTag) {
      button.textContent = `✧ Tag: ${activeTag} ✧`;
    } else {
      button.textContent = '✧ Filtrar por tag ✧';
    }
  }
</script>
