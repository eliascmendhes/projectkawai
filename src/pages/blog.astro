---
import Layout from '../layouts/Layout.astro';
import BlogCard from '../components/BlogCard.astro';

const allPosts = await Astro.glob('../posts/*.md');
const posts = allPosts
  .map(post => ({
    title: post.frontmatter.title,
    date: post.frontmatter.date,
    preview: post.frontmatter.preview,
    image: post.frontmatter.image,
    slug: post.frontmatter.slug,
    tags: post.frontmatter.tags || [],
    content: post.compiledContent()
  }))
  .sort((a, b) => {
    // Trabalho nas datas dos posts.
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    // Ordena do mais recente para o mais antigo
    return dateB.getTime() - dateA.getTime();
  });

// Obter todas as tags únicas
const allTags = [...new Set(posts.flatMap(post => post.tags))];
---

<Layout title="Blog">
  <div class="window max-w-4xl mx-auto sm:mx-4">
    <div class="window-header">
      <div class="window-title">Minhas Postagens</div>
      <div class="window-controls">
        <span class="minimize">_</span>
        <span class="maximize">□</span>
        <span class="close">×</span>
      </div>
    </div>

    <div class="window-content">
      <!-- Filtro de Tags -->
      <div class="filter-section mb-4">
        <div class="relative" id="tag-filters">
          <button class="xp-button" id="dropdown-button">
            Filtrar por tag
          </button>

          <div class="dropdown-menu hidden" id="dropdown-menu">
            <input
              type="text"
              placeholder="Buscar tag..."
              class="xp-input"
              id="tag-search"
            >
            <div class="tag-list" id="tag-list">
              <button class="tag-button filter-all active">
                Todas as tags
              </button>
              {allTags.map(tag => (
                <button
                  class="tag-button tag-filter"
                  data-tag={tag}
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      <!-- Lista de Posts -->
      <div class="posts-container">
        {posts.map(post => (
          <div class="post-card" data-tags={post.tags.join(',')}>
            <BlogCard {...post} />
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Janela Principal */
  .window {
    background: #ECE9D8;
    border: 1px solid #0054E3;
    border-radius: 8px 8px 0 0;
    box-shadow: 2px 2px 10px rgba(0,0,0,0.3);
    margin: 20px;
  }

  .window-header {
    background: linear-gradient(to right, #0054E3, #2787E9, #0054E3);
    padding: 5px 10px;
    border-radius: 7px 7px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    font-weight: bold;
  }

  .window-controls {
    display: flex;
    gap: 4px;
  }

  .window-controls span {
    width: 22px;
    height: 22px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(to bottom, #FFF, #DFDFDF);
    border: 1px solid #0054E3;
    border-radius: 3px;
    color: #000;
    cursor: pointer;
  }

  .window-content {
    padding: 20px;
    background: #fff;
  }

  /* Botões e Inputs */
  .xp-button {
    background: linear-gradient(to bottom, #F6F6F6, #DCDBDB);
    border: 1px solid #999;
    padding: 6px 12px;
    border-radius: 3px;
    color: #000;
    font-size: 0.9em;
    cursor: pointer;
  }

  .xp-button:hover {
    background: linear-gradient(to bottom, #FFF, #E9E9E9);
  }

  .xp-input {
    border: 1px solid #7A7A7A;
    padding: 4px 8px;
    width: 100%;
    margin-bottom: 8px;
  }

  /* Dropdown Menu */
  .dropdown-menu {
    position: absolute;
    z-index: 10;
    top: 100%;
    left: 0;
    width: 200px;
    background: #FFFFFF;
    border: 1px solid #7A7A7A;
    box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
    padding: 8px;
    margin-top: 4px;
  }

  .tag-list {
    max-height: 200px;
    overflow-y: auto;
  }

  .tag-button {
    display: block;
    width: 100%;
    text-align: left;
    padding: 4px 8px;
    background: none;
    border: none;
    cursor: pointer;
    color: #000;
  }

  .tag-button:hover {
    background: #E8E8E8;
  }

  .tag-button.active {
    background: #0054E3;
    color: #FFFFFF;
  }

  /* Posts Container */
  .posts-container {
    margin-top: 20px;
  }

  .post-card {
    background: #FFFFFF;
    border: 1px solid #D4D0C8;
    padding: 15px;
    margin-bottom: 15px;
  }

  /* Scrollbar Windows XP */
  .tag-list::-webkit-scrollbar {
    width: 16px;
  }

  .tag-list::-webkit-scrollbar-track {
    background: #F1F1F1;
    border: 1px solid #D4D0C8;
  }

  .tag-list::-webkit-scrollbar-thumb {
    background: #C1C1C1;
    border: 1px solid;
    border-color: #FFFFFF #808080 #808080 #FFFFFF;
  }

  @media (max-width: 640px) {
    .window {
      margin: 10px;
    }

    .window-content {
      padding: 10px;
    }

    .filter-section {
      margin-bottom: 1rem;
    }

    .posts-container {
      margin-top: 10px;
    }

    .post-card {
      padding: 10px;
      margin-bottom: 10px;
    }
  }
</style>

<script>
  let activeTag: string | null = null;

  function updateFilterButtons() {
    document.querySelectorAll('.tag-filter, .filter-all').forEach((button) => {
      const buttonElement = button as HTMLButtonElement;
      buttonElement.classList.remove('active', 'bg-[#FFD1DC]');

      if (
        (buttonElement.classList.contains('filter-all') && !activeTag) ||
        (buttonElement.getAttribute('data-tag') === activeTag)
      ) {
        buttonElement.classList.add('active', 'bg-[#FFD1DC]');
      }
    });
    updateDropdownButton();
  }

  function filterPosts(tag: string | null) {
    const posts = document.querySelectorAll('.post-card');

    posts.forEach((post) => {
      const postElement = post as HTMLElement;
      const postTags = postElement.getAttribute('data-tags')?.split(',') || [];

      if (!tag || postTags.includes(tag)) {
        postElement.style.display = 'block';
      } else {
        postElement.style.display = 'none';
      }
    });
  }

  // Event listeners
  const allFilterButton = document.querySelector('.filter-all');
  if (allFilterButton) {
    allFilterButton.addEventListener('click', () => {
      activeTag = null;
      updateFilterButtons();
      filterPosts(null);
    });
  }

  document.querySelectorAll('.tag-filter').forEach((button) => {
    const buttonElement = button as HTMLButtonElement;
    buttonElement.addEventListener('click', () => {
      const tag = buttonElement.getAttribute('data-tag');
      if (tag) {
        activeTag = activeTag === tag ? null : tag;
        updateFilterButtons();
        filterPosts(activeTag);
      }
    });
  });

  // Dropdown functionality
  const dropdownButton = document.getElementById('dropdown-button') as HTMLButtonElement;
  const dropdownMenu = document.getElementById('dropdown-menu') as HTMLDivElement;
  const tagSearch = document.getElementById('tag-search') as HTMLInputElement;

  dropdownButton?.addEventListener('click', () => {
    dropdownMenu?.classList.toggle('hidden');
  });

  // Fechar dropdown quando clicar fora
  document.addEventListener('click', (e) => {
    const target = e.target as Node;
    if (!dropdownButton?.contains(target) && !dropdownMenu?.contains(target)) {
      dropdownMenu?.classList.add('hidden');
    }
  });

  // Funcionalidade de busca
  tagSearch?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    const searchTerm = target.value.toLowerCase();
    const tagButtons = document.querySelectorAll('#tag-list .tag-filter');

    tagButtons.forEach(button => {
      const buttonElement = button as HTMLElement;
      const tag = buttonElement.textContent?.toLowerCase() || '';
      if (tag.includes(searchTerm)) {
        buttonElement.style.display = 'block';
      } else {
        buttonElement.style.display = 'none';
      }
    });
  });

  // Atualizar texto do botão quando uma tag for selecionada
  function updateDropdownButton() {
    const button = document.getElementById('dropdown-button');
    if (activeTag) {
      button.textContent = `✧ Tag: ${activeTag} ✧`;
    } else {
      button.textContent = '✧ Filtrar por tag ✧';
    }
  }
</script>
